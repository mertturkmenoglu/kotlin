package projectEuler.p012_HighlyDivisibleTriangularNumber

import kotlin.math.sqrt

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
fun main() {
    val result = findTriangleNumber(divisorCount = 500)
    println(result)
}

fun findTriangleNumber(divisorCount: Int): Long {
    var current = 1L
    var increment = 2L

    while (getDivisorCount(current) < divisorCount) {
        current += increment
        increment++
    }

    return current
}

fun getDivisorCount(n: Long): Int {
    var count = 0

    for (i in 1 .. sqrt(n.toDouble()).toLong()) {
        if (n % i == 0L) {
            if (n / i != i)
                count++
            count++
        }
    }

    return count
}